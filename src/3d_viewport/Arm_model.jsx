/**
 * Renders a 3D robotic arm model using GLTF format.
 * Uses Redux to get the servo angles and updates the model accordingly.
 * @param {object} props - React props object
 * @returns {JSX.Element} - Rendered component
 */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 arm_model.glb 
*/

import React, { useEffect, useRef} from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { Euler, Quaternion} from 'three'
import { animated } from '@react-spring/three'
import { useSelector } from 'react-redux'
import { map } from '../helpers/helpers'



export function ARM_model(props) {
  const group = useRef()
  const servoAngles = useSelector(state => state.arm.get_servoAngles)
  //console.log(servoAngles, "servoAngles")
 
  /**
   * useEffect hook that updates the 3D robotic arm model based on the servo angles obtained from the Redux store.
   * @param {object} servoAngles - Object containing the servo angles obtained from the Redux store.
   */
  useEffect(() => {
    process_s1angle(servoAngles[0]);
    process_s2angle(servoAngles[1]);
    process_s3angle(servoAngles[2]);
    set_s4angle(servoAngles[3],servoAngles[1],servoAngles[0]);
  }, [servoAngles]);




  const { nodes, materials, animations } = useGLTF('/arm_model.glb')
  const { actions, name } = useAnimations(animations, group)
   const rot =[nodes.b_s1.rotation,nodes.b_s2.rotation,nodes.b_s3.rotation, nodes.baseB.rotation]
   const [r1,r2,r3,base]= [...rot];
   console.log(base)



  /**
   * Processes the angle of servo 1 and updates the position of Bone (b_s1) in the 3D robotic arm model.
   * @param {number} s1_angle - Angle of servo 1 obtained from the Redux store.
   */
  const process_s1angle = (s1_angle) => {
    
    const angle = map(s1_angle, 0, 180, -60, 60);
    if (nodes.b_s1) {
      const euler = new Euler(-(angle * Math.PI / 180), 0, 0, 'XYZ');
      const quaternion = new Quaternion().setFromEuler(euler);
      nodes.b_s1.quaternion.copy(quaternion);
    }
  }

  /**
   * Processes the angle of servo 2 and updates the position of Bone (b_s2) in the 3D robotic arm model.
   * @param {number} s2_angle - Angle of servo 2 obtained from the Redux store.
   */
  const process_s2angle = (s2_angle) => {
    nodes.b_s2.position.set(0, 7, -0.8888888888888888);
    const angle = map(s2_angle, 0, 180, -100, 60);
    if (nodes.b_s2) {
      const euler = new Euler(-(angle * Math.PI / 180), -( 9.4), 0, 'XYZ');
      const quaternion = new Quaternion().setFromEuler(euler);
      nodes.b_s2.quaternion.copy(quaternion);
    }
  }

 /**
   * Processes the angle of servo 3 and updates the position of Bone (b_s3) in the 3D robotic arm model.
   * @param {number} s3_angle - Angle of servo 3 obtained from the Redux store.
   */
  const process_s3angle = (s3_angle) => {
    const angle = map(s3_angle, 0, 180, -80, 80);
    if (nodes.b_s3) {
      const euler = new Euler(-(angle * Math.PI / 180), 0, 0, 'XYZ');
      const quaternion = new Quaternion().setFromEuler(euler);
      nodes.b_s3.quaternion.copy(quaternion);
    }
  }

 /**
   * Processes the angle of servo 4 and updates the position of Bone (b_s4) in the 3D robotic arm model.
   * @param {number} s4_angle - Angle of servo 4 obtained from the Redux store.
   */

  const set_s4angle = (s4_angle,y,x) => {

     const angle = map(s4_angle, 0, 180, -180, 0);
    if (nodes.baseB) {
      const euler = new Euler(-.2, angle * Math.PI / 180,0, 'ZYX');
      const quaternion = new Quaternion().setFromEuler(euler);
      nodes.baseB.quaternion.copy(quaternion);
    }
    
    console.log("pos",nodes.baseB.position);
    
    
  }

  return (
    <>
      <animated.mesh>
        <group ref={group} {...props} dispose={null}>
          <group name="Scene">
            <group name="Armature002" position={[0, 0, 0]} rotation={[0, 1, 0]}>
              <primitive object={nodes.baseB} />
            </group>
          </group>
        </group>
      </animated.mesh>
    </>
  )
}

useGLTF.preload('/arm_model.glb')
